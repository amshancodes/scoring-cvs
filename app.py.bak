"""
Resume Evaluation System - Streamlit Web Application
"""

import os
import json
import time
import streamlit as st
from pathlib import Path

# Import utility modules
from utils.resume_processor import (
    extract_text_from_pdf_bytes,
    extract_text_from_pdf_file,
    evaluate_resume_with_ai,
    get_available_templates,
    read_prompt_file,
    get_available_models
)
from utils.ui_components import (
    set_page_config,
    add_custom_css,
    show_header,
    show_template_card,
    show_evaluation_summary,
    show_footer,
    show_api_key_input,
    download_button,
    copy_button,
    show_markdown_content
)

# Set page configuration
set_page_config()
add_custom_css()

# Initialize session state if not already done
if 'step' not in st.session_state:
    st.session_state.step = 1
if 'resume_text' not in st.session_state:
    st.session_state.resume_text = ""
if 'evaluation_result' not in st.session_state:
    st.session_state.evaluation_result = None
if 'markdown_result' not in st.session_state:
    st.session_state.markdown_result = ""
if 'raw_api_response' not in st.session_state:
    st.session_state.raw_api_response = ""
if 'filename' not in st.session_state:
    st.session_state.filename = ""
if 'selected_template_index' not in st.session_state:
    st.session_state.selected_template_index = 0
if 'selected_model_index' not in st.session_state:
    st.session_state.selected_model_index = 0
if 'show_password' not in st.session_state:
    st.session_state.show_password = False

# Get API key from Streamlit secrets or environment variable
def get_api_key():
    # Try to get from secrets
    if 'openai' in st.secrets and 'api_key' in st.secrets['openai']:
        return st.secrets['openai']['api_key']
    # Fallback to environment variable
    return os.environ.get('OPENAI_API_KEY', '')

# Navigation functions
def go_to_step(step_number):
    st.session_state.step = step_number
    
def go_to_next_step():
    st.session_state.step += 1

def go_to_previous_step():
    st.session_state.step -= 1
    
def reset_app():
    st.session_state.step = 1
    st.session_state.resume_text = ""
    st.session_state.evaluation_result = None
    st.session_state.markdown_result = ""
    st.session_state.raw_api_response = ""
    st.session_state.filename = ""

# Create markdown content from API response - modified to use the markdown directly
def create_markdown_from_api(response, filename):
    """
    Create markdown content from the API response.
    This now uses the markdown_content field directly if available.
    """
    try:
        # Check if we have the markdown content directly
        if isinstance(response, dict) and 'markdown_content' in response:
            # Return the markdown content directly
            return response['markdown_content']
        
        # If markdown_content is not available, check for raw_text
        if isinstance(response, dict) and 'raw_text' in response:
            return response['raw_text']
        
        # If neither markdown_content nor raw_text is available, handle as before
        if isinstance(response, dict):
            # Start with the resume name
            markdown = f"# Resume Evaluation: {filename}\n\n"
            
            # If response has a standard format, extract fields
            if 'total_score' in response or 'summary' in response:
                # Add summary if available
                if 'summary' in response:
                    markdown += f"## Summary\n{response['summary']}\n\n"
                
                # Add total score if available
                if 'total_score' in response:
                    markdown += f"## Overall Score: {response['total_score']}/50\n\n"
                
                # Add individual categories
                categories = [
                    ('overall_impression', 'Overall Impression'),
                    ('technical_skills', 'Technical Skills'), 
                    ('experience', 'Experience'),
                    ('education', 'Education'),
                    ('projects', 'Projects')
                ]
                
                for key, label in categories:
                    if key in response and isinstance(response[key], dict):
                        category = response[key]
                        score = category.get('score', '-')
                        explanation = category.get('explanation', 'No details provided.')
                        markdown += f"## {label}: {score}/10\n{explanation}\n\n"
            else:
                # If it doesn't match our expected format, just dump the entire response
                markdown += "## Evaluation Results\n"
                markdown += json.dumps(response, indent=2)
        else:
            # If not a dict, handle as string or raw content
            markdown = f"# Resume Evaluation: {filename}\n\n"
            markdown += str(response)
        
        return markdown.strip()
        
    except Exception as e:
        # If something goes wrong, return a basic evaluation
        return f"# Resume Evaluation: {filename}\n\nError generating formatted output: {str(e)}"

# App header
show_header()

# Simple authentication (MVP version)
password = "demo123"  # Simple password for MVP
if 'authenticated' not in st.session_state:
    st.session_state.authenticated = False

# Authentication check
if not st.session_state.authenticated:
    auth_col1, auth_col2 = st.columns([3, 1])
    with auth_col1:
        entered_password = st.text_input("Enter password to access the application", type="password")
    with auth_col2:
        if st.button("Login"):
            if entered_password == password:
                st.session_state.authenticated = True
                st.rerun()
            else:
                st.error("Incorrect password")
    st.stop()

# Main content area - based on current step
if st.session_state.step == 1:
    # Step 1: Resume Input
    st.markdown("## Step 1: Resume Input")
    st.markdown("Upload a resume file or paste the resume text below.")
    
    # Input tabs for different input methods
    tab1, tab2, tab3 = st.tabs(["üì§ Upload PDF", "üìù Paste Text", "üîç Sample Resume"])
    
    with tab1:
        uploaded_file = st.file_uploader("Upload a resume PDF file", type=['pdf'])
        if uploaded_file is not None:
            try:
                st.session_state.filename = uploaded_file.name
                st.session_state.resume_text = extract_text_from_pdf_bytes(uploaded_file)
                st.success(f"Successfully extracted text from {uploaded_file.name}")
                
                with st.expander("Preview Extracted Text"):
                    st.text_area("Resume Text", st.session_state.resume_text, height=300)
                    
            except Exception as e:
                st.error(f"Error processing PDF: {e}")
    
    with tab2:
        pasted_text = st.text_area("Paste resume text here", height=300)
        if st.button("Use this text"):
            if pasted_text.strip():
                st.session_state.resume_text = pasted_text
                st.session_state.filename = "pasted_resume"
                st.success("Resume text saved")
            else:
                st.warning("Please paste some text first")
    
    with tab3:
        st.info("Load a sample resume for demonstration purposes")
        if st.button("Load Sample Resume"):
            # Try to load the sample text file
            sample_txt_path = Path("samples/sample_resume.txt")
            
            if sample_txt_path.exists():
                try:
                    with open(sample_txt_path, 'r') as file:
                        sample_text = file.read()
                        
                    st.session_state.resume_text = sample_text
                    st.session_state.filename = "sample_resume"
                    st.success(f"Loaded sample resume")
                    
                    with st.expander("Preview Sample Resume"):
                        st.text_area("Sample Resume", sample_text, height=300)
                        
                except Exception as e:
                    st.error(f"Error loading sample text: {e}")
                    
            else:
                # If text file doesn't exist, try PDF files
                sample_paths = [
                    Path("samples/sample_resume.pdf"),
                    Path("samples/resume_sample.pdf"),
                    Path("PDF-RESUMES/Adam_Jinnah_JuiceboxExport_2025-04-16_10.pdf")
                ]
                
                sample_found = False
                for sample_path in sample_paths:
                    if sample_path.exists():
                        try:
                            st.session_state.resume_text = extract_text_from_pdf_file(sample_path)
                            st.session_state.filename = sample_path.name
                            st.success(f"Loaded sample resume: {sample_path.name}")
                            sample_found = True
                            
                            with st.expander("Preview Sample Resume Text"):
                                st.text_area("Sample Resume", st.session_state.resume_text, height=300)
                            
                            break
                        except Exception as e:
                            st.error(f"Error loading sample PDF: {e}")
                
                if not sample_found:
                    st.error("No sample resume files found. Please add a sample to the 'samples' directory.")
                    # Provide a dummy text as fallback
                    if st.button("Use Dummy Sample Instead"):
                        dummy_text = """
                        John Doe
                        AI Researcher & Machine Learning Engineer
                        
                        EXPERIENCE
                        Senior Machine Learning Engineer
                        TechCorp, Inc. (2020-Present)
                        ‚Ä¢ Led development of NLP models for text classification
                        ‚Ä¢ Improved model accuracy by 25% using transformer architectures
                        ‚Ä¢ Deployed ML pipelines to production serving 10M+ users
                        
                        AI Research Associate
                        University of Technology (2018-2020)
                        ‚Ä¢ Published 3 papers on deep learning techniques
                        ‚Ä¢ Developed novel approaches for computer vision tasks
                        
                        EDUCATION
                        Ph.D. in Computer Science
                        University of Technology (2018)
                        
                        B.S. in Computer Science
                        State University (2014)
                        
                        SKILLS
                        Python, TensorFlow, PyTorch, NLP, Computer Vision, 
                        MLOps, Git, Docker, Kubernetes, SQL, AWS
                        """
                        st.session_state.resume_text = dummy_text
                        st.session_state.filename = "dummy_sample_resume"
                        st.success("Loaded dummy sample resume text")
                        
                        with st.expander("Preview Dummy Sample Resume"):
                            st.text_area("Dummy Sample", dummy_text, height=300)
    
    # Navigation
    col1, col2, col3 = st.columns([2, 2, 6])
    with col2:
        if st.button("Next: Configure Evaluation", disabled=not st.session_state.resume_text):
            go_to_next_step()

elif st.session_state.step == 2:
    # Step 2: Configure Evaluation
    st.markdown("## Step 2: Configure Evaluation")
    st.markdown("Configure how you want the resume to be evaluated.")
    
    # Get available templates
    templates = get_available_templates()
    
    # Template selection
    st.markdown("### Evaluation Template")
    for i, template in enumerate(templates):
        col1, col2 = st.columns([9, 1])
        with col1:
            show_template_card(template, selected=(i == st.session_state.selected_template_index))
        with col2:
            if st.button("Select", key=f"template_{i}"):
                st.session_state.selected_template_index = i
    
    # Advanced options expander
    with st.expander("Advanced Options"):
        # Custom prompt editing
        st.markdown("### Customize Prompts")
        if st.checkbox("Edit evaluation prompts", value=False):
            selected_template = templates[st.session_state.selected_template_index]
            
            # Read current prompts
            system_prompt = read_prompt_file(selected_template['system_prompt'])
            user_prompt = read_prompt_file(selected_template['user_prompt'])
            
            # Edit prompts
            st.markdown("#### System Prompt")
            system_prompt_edited = st.text_area("System Prompt", system_prompt, height=200)
            
            st.markdown("#### User Prompt")
            user_prompt_edited = st.text_area("User Prompt Template", user_prompt, height=300)
            
            # Save edited prompts (in-memory for MVP)
            if system_prompt_edited != system_prompt or user_prompt_edited != user_prompt:
                if st.button("Save Custom Prompts"):
                    # In a full implementation, we'd save these to files or database
                    # For the MVP, we'll just update the template object in memory
                    templates[st.session_state.selected_template_index]['custom_system_prompt'] = system_prompt_edited
                    templates[st.session_state.selected_template_index]['custom_user_prompt'] = user_prompt_edited
                    st.success("Custom prompts saved")
    
    # Navigation
    col1, col2, col3, col4 = st.columns([2, 2, 2, 4])
    with col1:
        if st.button("‚Üê Previous"):
            go_to_previous_step()
    with col2:
        if st.button("Start Evaluation"):
            # Check if API key is available before proceeding
            api_key = get_api_key()
            if not api_key:
                st.error("OpenAI API key not found. Please contact the administrator.")
            else:
                go_to_next_step()

elif st.session_state.step == 3:
    # Step 3: Evaluation Process
    st.markdown("## Evaluating Resume")
    
    # Get API key
    api_key = get_api_key()
    if not api_key:
        st.error("OpenAI API key not found. Please contact the administrator.")
        if st.button("‚Üê Go Back"):
            go_to_previous_step()
        st.stop()
    
    # Main content area with centered progress indicators
    col1, col2, col3 = st.columns([1, 2, 1])
    with col2:
        progress_bar = st.progress(0)
        status_text = st.empty()
        result_preview = st.empty()
        
        # Only run the evaluation if we don't already have a result
        if not st.session_state.evaluation_result:
            status_text.text("Starting evaluation...")
            progress_bar.progress(10)
            time.sleep(0.3)
            
            # Show progress updates
            status_text.text("Analyzing resume content...")
            progress_bar.progress(30)
            time.sleep(0.5)
            
            status_text.text("Evaluating skills and experience...")
            progress_bar.progress(50)
            time.sleep(0.5)
            
            status_text.text("Generating assessment...")
            progress_bar.progress(70)
            time.sleep(0.5)
            
            try:
                # Get the selected template
                templates = get_available_templates()
                selected_template = templates[st.session_state.selected_template_index]
                
                # Use default model (GPT-4.1)
                models = get_available_models()
                selected_model = models[0]  # Always use the first (best) model
                
                # Get prompts (including any custom ones)
                if 'custom_system_prompt' in selected_template:
                    system_prompt = selected_template['custom_system_prompt']
                else:
                    system_prompt = read_prompt_file(selected_template['system_prompt'])
                    
                if 'custom_user_prompt' in selected_template:
                    user_prompt = selected_template['custom_user_prompt']
                else:
                    user_prompt = read_prompt_file(selected_template['user_prompt'])
                
                # Update status
                status_text.text("Sending request to OpenAI...")
                progress_bar.progress(85)
                
                # Run the evaluation
                evaluation_result = evaluate_resume_with_ai(
                    st.session_state.resume_text,
                    system_prompt,
                    user_prompt,
                    selected_model['value'],
                    api_key
                )
                
                # Store the result in session state
                st.session_state.evaluation_result = evaluation_result
                
                # Store raw response for debugging
                if '_raw_response' in evaluation_result:
                    st.session_state.raw_api_response = evaluation_result['_raw_response']
                
                # Create markdown representation - now using markdown directly
                if 'markdown_content' in evaluation_result:
                    markdown_result = evaluation_result['markdown_content']
                else:
                    markdown_result = create_markdown_from_api(evaluation_result, st.session_state.filename)
                    
                st.session_state.markdown_result = markdown_result
                
                # Update progress
                status_text.text("Evaluation complete!")
                progress_bar.progress(100)
                time.sleep(0.5)
                
                # Clear the progress indicators
                progress_bar.empty()
                status_text.empty()
                
                # Show the evaluation result directly
                st.success("Evaluation completed successfully!")
                
                # Display the markdown content
                st.subheader("Evaluation Results")
                show_markdown_content(markdown_result)
                
                # Add export options
                st.markdown("### Export Options")
                col1, col2 = st.columns(2)
                with col1:
                    download_button(
                        markdown_result,
                        f"{st.session_state.filename.split('.')[0]}_evaluation.md",
                        "üì• Download as Markdown"
                    )
                
                # Add debugging expander
                with st.expander("Debug Information"):
                    st.markdown("### Raw API Response")
                    if st.session_state.raw_api_response:
                        st.code(st.session_state.raw_api_response, language="markdown")
                    else:
                        st.code(json.dumps(evaluation_result, indent=2), language="json")
                
                # Navigation options
                st.markdown("### Actions")
                col1, col2 = st.columns(2)
                with col1:
                    if st.button("‚Üê Back to Configuration"):
                        go_to_step(2)
                with col2:
                    if st.button("Evaluate Another Resume"):
                        reset_app()
                
            except Exception as e:
                # Clear progress indicators
                progress_bar.empty()
                status_text.empty()
                
                # Show error
                st.error(f"Error during evaluation: {str(e)}")
                
                # More detailed error information for debugging
                with st.expander("Error Details"):
                    st.code(str(e))
                    if hasattr(e, '__dict__'):
                        st.json(e.__dict__)
                
                # Navigation options
                st.markdown("### Actions")
                col1, col2 = st.columns(2)
                with col1:
                    if st.button("‚Üê Back to Configuration"):
                        go_to_step(2)
                with col2:
                    if st.button("Try Again"):
                        # Clear the result to force re-evaluation
                        st.session_state.evaluation_result = None
                        st.rerun()
        else:
            # We already have results, just display them
            st.success("Evaluation completed successfully!")
            
            # Display the markdown content
            st.subheader("Evaluation Results")
            show_markdown_content(st.session_state.markdown_result)
            
            # Add export options
            st.markdown("### Export Options")
            col1, col2 = st.columns(2)
            with col1:
                download_button(
                    st.session_state.markdown_result,
                    f"{st.session_state.filename.split('.')[0]}_evaluation.md",
                    "üì• Download as Markdown"
                )
            
            # Add debugging expander
            with st.expander("Debug Information"):
                st.markdown("### Raw API Response")
                if st.session_state.raw_api_response:
                    st.code(st.session_state.raw_api_response, language="markdown")
                else:
                    st.code(json.dumps(st.session_state.evaluation_result, indent=2), language="json")
            
            # Navigation options
            st.markdown("### Actions")
            col1, col2 = st.columns(2)
            with col1:
                if st.button("‚Üê Back to Configuration"):
                    go_to_step(2)
            with col2:
                if st.button("Evaluate Another Resume"):
                    reset_app()

# Footer
show_footer()

# Add branding in the main content area instead of sidebar
st.markdown("---")
st.markdown("""
<div style="text-align: center; padding: 10px; background-color: #f8f9fa; border-radius: 5px;">
    <p style="margin-bottom: 0; color: #666; font-size: 0.9rem;">
        This is an internal resume evaluation system that leverages AI to provide consistent assessments.
    </p>
</div>
""", unsafe_allow_html=True)

if __name__ == "__main__":
    # This will run when the script is executed directly
    pass 